// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cartpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartClient is the client API for Cart service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartClient interface {
	Add(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*CartResponse, error)
	Get(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (Cart_GetClient, error)
	Remove(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*CartResponse, error)
	Flush(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cartClient struct {
	cc grpc.ClientConnInterface
}

func NewCartClient(cc grpc.ClientConnInterface) CartClient {
	return &cartClient{cc}
}

func (c *cartClient) Add(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/simcart.api.cart.Cart/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) Get(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (Cart_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Cart_ServiceDesc.Streams[0], "/simcart.api.cart.Cart/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &cartGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cart_GetClient interface {
	Recv() (*CartResponse, error)
	grpc.ClientStream
}

type cartGetClient struct {
	grpc.ClientStream
}

func (x *cartGetClient) Recv() (*CartResponse, error) {
	m := new(CartResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cartClient) Remove(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, "/simcart.api.cart.Cart/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartClient) Flush(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/simcart.api.cart.Cart/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServer is the server API for Cart service.
// All implementations must embed UnimplementedCartServer
// for forward compatibility
type CartServer interface {
	Add(context.Context, *CartRequest) (*CartResponse, error)
	Get(*CartRequest, Cart_GetServer) error
	Remove(context.Context, *CartRequest) (*CartResponse, error)
	Flush(context.Context, *CartRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCartServer()
}

// UnimplementedCartServer must be embedded to have forward compatible implementations.
type UnimplementedCartServer struct {
}

func (UnimplementedCartServer) Add(context.Context, *CartRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCartServer) Get(*CartRequest, Cart_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCartServer) Remove(context.Context, *CartRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedCartServer) Flush(context.Context, *CartRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (UnimplementedCartServer) mustEmbedUnimplementedCartServer() {}

// UnsafeCartServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServer will
// result in compilation errors.
type UnsafeCartServer interface {
	mustEmbedUnimplementedCartServer()
}

func RegisterCartServer(s grpc.ServiceRegistrar, srv CartServer) {
	s.RegisterService(&Cart_ServiceDesc, srv)
}

func _Cart_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simcart.api.cart.Cart/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).Add(ctx, req.(*CartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CartRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CartServer).Get(m, &cartGetServer{stream})
}

type Cart_GetServer interface {
	Send(*CartResponse) error
	grpc.ServerStream
}

type cartGetServer struct {
	grpc.ServerStream
}

func (x *cartGetServer) Send(m *CartResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Cart_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simcart.api.cart.Cart/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).Remove(ctx, req.(*CartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cart_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simcart.api.cart.Cart/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServer).Flush(ctx, req.(*CartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cart_ServiceDesc is the grpc.ServiceDesc for Cart service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cart_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simcart.api.cart.Cart",
	HandlerType: (*CartServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Cart_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Cart_Remove_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _Cart_Flush_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _Cart_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cartpb/services.proto",
}
